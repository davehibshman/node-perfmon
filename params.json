{"name":"Node-perfmon","body":"# perfmon\r\n\r\nStreaming [Performance Monitor](http://technet.microsoft.com/en-us/library/cc749249.aspx) metrics for [Node](http://nodejs.org) on Windows.\r\n\r\n[node-perfmon](http://markitondemand.github.com/node-perfmon) is a thin wrapper around [typeperf](http://technet.microsoft.com/en-us/library/bb490960.aspx), and provides a [ReadableStream](http://nodejs.org/docs/latest/api/streams.html#readable_Stream) interface to the typeperf output.  Metrics are streamed once per second.  `perfmon` wraps up the typeperf executable as a child_process. It ensures that no more than one process will be spawned for each host machine streaming metrics.\r\n\r\n### Dependenices\r\n\r\nNode, Windows, and the typeperf executable in your path.  I've never seen a Windows installation that didn't have it, but it's not out of the realm of possibility.  Windows For Workgroups 3.11 had it. _Maybe._ Definitely NT4 and up.\r\n\r\nOnly the machine running Node needs Node. Makes perfect sense.  The only requirements to stream metrics from a remote machine are Windows running on that machine, and appropriate permissions to do so.\r\n\r\n## Install\r\n\r\n\tnpm install perfmon\r\n\r\n## Usage\r\n\r\nThe most basic usage is to stream a single metric from the local machine.  The `perfmon` function returns an instance of a ReadableStream.  You can either pass a callback as the last argument, or attach to the `data` and `error` events on the returned Stream.\r\n\r\nThe first two arguments to perfmon, `counters` and `hosts`, can be strings or arrays.  `hosts` is optional and assumed to be local machine if not specified.\r\n\r\n```javascript\r\nvar perfmon = require('perfmon');\r\n\r\nperfmon('\\\\processor(_total)\\\\% processor time', function(err, data) {\r\n\tconsole.log(data);\r\n});\r\n```\r\n\r\nThe `data` object logged to the console:\r\n\r\n```javascript\r\n{ host: 'yourcomputer',\r\n  time: 1328067580990, // UTC timestamp in ms\r\n  counters:\r\n  { '\\\\processor(_total)\\\\% processor time': 17 }\r\n}\r\n```\r\n\r\n### List available metric counters\r\n\r\nUse `list` to return a, um, list of available counters.\r\n\r\n```javascript\r\nperfmon.list('memory', function(err, data) {\r\n\tconsole.log(data);\r\n});\r\n```\r\n\r\nThe `data` object logged to the console:\r\n\r\n```javascript\r\n{ counters:\r\n  [ 'memory\\\\Page Faults/sec',\r\n    'memory\\\\Available Bytes',\r\n    'memory\\\\Committed Bytes',\r\n    // ... omitted for brevity ...\r\n    'memory\\\\Available KBytes',\r\n    'memory\\\\Available MBytes',\r\n    'memory\\\\Transition Pages RePurposed/sec',\r\n    'memory\\\\Free & Zero Page List Bytes',\r\n    'memory\\\\Modified Page List Bytes',\r\n    'memory\\\\Standby Cache Reserve Bytes',\r\n    'memory\\\\Standby Cache Normal Priority Bytes',\r\n    'memory\\\\Standby Cache Core Bytes' ],\r\nhost: 'yourcomputer' }\r\n```\r\n\r\n### Stream remote host metrics\r\n\r\nYou can connect to any host on your network and stream metrics from that machine. \r\n\r\n```javascript\r\nvar counters = [\r\n\t'\\\\processor(_total)\\\\% processor time',\r\n\t'\\\\memory\\\\available bytes',\r\n];\r\n\r\nperfmon(counters, 'somecomputer.somewhere.local', function(err, data) {\r\n\tconsole.log(data);\r\n});\r\n```","tagline":"Streaming performance metrics for Node on Windows","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}